# Overview: build and create a release via Google Cloud Deploy for GKE
# NOTE: currently requires SCM triggering due to dependency on the COMMIT_SHA variable
substitutions:
  _SEVERITY: CRITICAL
  _IMAGE: 'us-central1-docker.pkg.dev/${PROJECT_ID}/pop-stats/pop-stats:${COMMIT_SHA}'
# _IMAGE: 'gcr.io/${PROJECT_ID}/pop-stats/pop-stats:${COMMIT_SHA}'
  _KMS_KEY_NAME: 'projects/${PROJECT_ID}/locations/global/keyRings/kritis-signer-key-ring/cryptoKeys/kritis-signer-key/cryptoKeyVersions/1'
  _KMS_DIGEST_ALG: SHA256
  _NOTE_NAME: 'projects/${PROJECT_ID}/notes/my-signer-note'
options:
    dynamic_substitutions: true
steps:
  # Build and tag using commit sha
  - name: 'gcr.io/cloud-builders/docker'
    id: build_container
    args: ['build', '.', '-t', '${_IMAGE}', '-f', 'Dockerfile']
    dir: 'app'
  # Run api tests
  - name: '${_IMAGE}'
    id: unit_test   
    entrypoint: python
    args: ["api_tests.py"]
    dir: 'app'
# - id: scan_image
#   name: gcr.io/google.com/cloudsdktool/cloud-sdk
#   entrypoint: bash   
#   args:
#   - '-c'
#   - |
#     gcloud artifacts docker images scan ${_IMAGE} \
#     --format='value(response.scan)' > /workspace/scan_id.txt
   # Severity check
# - name: gcr.io/google.com/cloudsdktool/cloud-sdk
#   id: severity_check
#   entrypoint: bash  
#   args:
#   - -c 
#   - | 
#     gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
#     --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SEVERITY; \
#     then echo 'Failed vulnerability check' && exit 1; else exit 0; fi
  # Push the container image to Artifact Registry
   name: gcr.io/cloud-builders/docker
    entrypoint: /bin/bash
    args:
    - -c
    - |
      docker push ${_IMAGE} &&
      docker image inspect ${_IMAGE} --format '{{index .RepoDigests 0}}' > image-digest.txt &&
      cat image-digest.txt
    id: push
  # Verify vunerabilities with kritis signer
  - name: us-central1-docker.pkg.dev/golden-path-345519/pop-stats/signer:latest
    entrypoint: bash
    args:
    - -c
    - |
      /signer -v=10 -alsologtostderr \
      -image=$(cat image-digest.txt) \
      -policy=/container-analysis-policy.yaml -vulnz_timeout=10m -mode=check-only \
      -kms_key_name=${_KMS_KEY_NAME} \
      -kms_digest_alg=${_KMS_DIGEST_ALG} \
      -note_name=${_NOTE_NAME}
#   waitFor: push_to_registry
    id: vulnsign
  # Create release in Google Cloud Deploy
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: release_to_clouddeploy
    entrypoint: gcloud
    args: 
      [
        "deploy", "releases", "create", "rel-${SHORT_SHA}",
        "--delivery-pipeline", "pop-stats-pipeline",
        "--region", "us-central1",
        "--annotations", "commitId=${REVISION_ID}",
        "--images", "pop-stats=${_IMAGE}"
      ]
    
